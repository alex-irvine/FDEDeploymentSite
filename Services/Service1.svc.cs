using MongoDB.Bson;
using MongoDB.Driver;
using Services.lib;
using Services.Model;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;


namespace Services
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    public class Service1 : IService1
    {
        #region autoGenerated
        public string GetData(int value)
        {
            return string.Format("You entered: {0}", value);
        }

        public CompositeType GetDataUsingDataContract(CompositeType composite)
        {
            if (composite == null)
            {
                throw new ArgumentNullException("composite");
            }
            if (composite.BoolValue)
            {
                composite.StringValue += "Suffix";
            }
            return composite;
        }
        #endregion

        #region Users
        /// <summary>
        /// Test service
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        public GetPersonResponse GetPerson(GetPersonRequest request)
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");

                // get person
                Person user = collection.Find(new BsonDocument("Username", request.Username)).First();

                if(user != null)
                {
                    // cleanse password data
                    user.Password = null;
                    user.Salt = null;
                    // return the user
                    return new GetPersonResponse()
                    {
                        User = user,
                        Errored = false,
                        Message = "Person found"
                    };
                }
                else
                {
                    return new GetPersonResponse()
                    {
                        Errored = true,
                        Message = "Person not found"
                    };
                }
            }
            // db errors    
            catch (Exception ex)
            {
                return new GetPersonResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Test service
        /// </summary>
        /// <returns></returns>
        public GetApprovedAdminsResponse GetApprovedAdmins()
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");


                // get person
                List<Person> user = collection.Find(new BsonDocument("IsAdmin", true)).ToList<Person>();
                List<Person> user2 = new List<Person> ();
                foreach (Person gens in user)
                {
                    if (gens.IsApproved == true)
                    {
                        user2.Add(gens);
                    }
                }
                if (user2 != null)
                {
                    // cleanse password data
                    user2.ForEach(x => x.Password = null);
                    user2.ForEach(x => x.Salt = null);

                    // return the user
                    return new GetApprovedAdminsResponse()
                    {
                        Users = user2,
                        Errored = false,
                        Message = "Person found"
                    };
                }
                else
                {
                    return new GetApprovedAdminsResponse()
                    {
                        Errored = true,
                        Message = "Person not found"
                    };
                }
            }
            // db errors    
            catch (Exception ex)
            {
                return new GetApprovedAdminsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Test service
        /// </summary>
        /// <returns></returns>
        public GetApprovedUsersResponse GetApprovedUsers()
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");

                // get person
                List<Person> user = collection.Find(new BsonDocument("IsApproved", true)).ToList<Person>();
                List<Person> user2 = new List<Person>();
                foreach (Person gens in user)
                {
                    if (gens.IsAdmin == false)
                    {
                        user2.Add(gens);
                    }
                }
                if (user2 != null)
                {
                    // cleanse password data
                    user2.ForEach(x => x.Password = null);
                    user2.ForEach(x => x.Salt = null);
                    
                    // return the user
                    return new GetApprovedUsersResponse()
                    {
                        Users = user2,
                        Errored = false,
                        Message = "Person found"
                    };
                }
                else
                {
                    return new GetApprovedUsersResponse()
                    {
                        Errored = true,
                        Message = "Person not found"
                    };
                }
            }
            // db errors    
            catch (Exception ex)
            {
                return new GetApprovedUsersResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Test service
        /// </summary>
        /// <returns></returns>
        public GetNotApprovedUsersResponse GetNotApprovedUsers()
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");

                // get person
                List<Person> user = collection.Find(new BsonDocument("IsApproved", false)).ToList<Person>();

                if (user != null)
                {
                    // cleanse password data
                    user.ForEach(x => x.Password = null);
                    user.ForEach(x => x.Salt = null);

                    // return the user
                    return new GetNotApprovedUsersResponse()
                    {
                        Users = user,
                        Errored = false,
                        Message = "Person found"
                    };
                }
                else
                {
                    return new GetNotApprovedUsersResponse()
                    {
                        Errored = true,
                        Message = "Person not found"
                    };
                }
            }
            // db errors    
            catch (Exception ex)
            {
                return new GetNotApprovedUsersResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public AuthenticateUserResponse AuthenticateUser(AuthenticateUserRequest request)
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");

                // get person
                Person user = collection.Find(new BsonDocument("Username", request.Username)).First();

                if (user == null)
                {
                    return new AuthenticateUserResponse()
                    {
                        Authenticated = false,
                        Errored = true,
                        Message = "Username not found"
                    };
                }

                // get hash
                byte[] hash = AuthLib.CreateHash(request.Password, Convert.FromBase64String(user.Salt));

                // check hash
                bool authenticated = AuthLib.SlowEquals(hash, Convert.FromBase64String(user.Password));
                if(authenticated)
                {
                    //cleanse passwords
                    user.Password = null;
                    user.Salt = null;
                    // respond
                    return new AuthenticateUserResponse()
                    {
                        Person = user,
                        Authenticated = true,
                        Errored = false,
                        Message = "User authenticated"
                    };
                }
                else
                {
                    return new AuthenticateUserResponse()
                    {
                        Authenticated = false,
                        Errored = true,
                        Message = "Password incorrect"
                    };
                }
            }
            // db errors    
            catch (Exception ex)
            {
                return new AuthenticateUserResponse()
                {
                    Authenticated = false,
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Creates a user on the database with hashed password
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public RegisterUserResponse RegisterUser(RegisterUserRequest request)
        {
            // create and store salt
            byte[] salt = AuthLib.CreateSalt();
            request.User.Salt = Convert.ToBase64String(salt);

            // create hash and replace password
            byte[] pass = AuthLib.CreateHash(request.User.Password, salt);
            request.User.Password = Convert.ToBase64String(pass);

            request.User.IsApproved = false;
            // add user to DB
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Person>("Users");

                // insert the user 
                collection.InsertOne(request.User);

                // check the insert was successful
                if (request.User._id != null)
                {
                    return new RegisterUserResponse()
                    {
                        InsertedId = request.User._id,
                        Errored = false,
                        Message = "User registered"
                    };
                }
                else
                {
                    return new RegisterUserResponse()
                    {
                        Errored = true,
                        Message = "User not registered"
                    };
                }

            }
            // db errors
            catch (Exception ex)
            {
                return new RegisterUserResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }

        }

        /// <summary>
        /// sets the publish flag as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApproveUserResponse ApproveUser(ApproveUserRequest request)
        {
            // try and change the publish flag on the sent _id
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Person>("Users");

                // update the item
                var updated = col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)),
                                            new BsonDocument("$set",
                                            new BsonDocument("IsApproved", request.Approve)));

                
                // error stuff
                if (updated.ModifiedCount == 1)
                {
                    return new ApproveUserResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new ApproveUserResponse()
                    {
                        Errored = true,
                        Message = "No matching document or no update to process"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new ApproveUserResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// sets the publish flag as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApproveAdminResponse ApproveAdmin(ApproveAdminRequest request)
        {
            // try and change the publish flag on the sent _id
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Person>("Users");

                // update the item
                var updated = col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)),
                                            new BsonDocument("$set",
                                            new BsonDocument("IsAdmin", request.Admin)));


                // error stuff
                if (updated.ModifiedCount == 1)
                {
                    return new ApproveAdminResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new ApproveAdminResponse()
                    {
                        Errored = true,
                        Message = "No matching document or no update to process"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new ApproveAdminResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// sets the publish flag as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DeleteUserResponse DeleteUser(DeleteUserRequest request)
        {
            // try and delete the requested item
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Person>("Users");

                // buhbye
                var deleted = col.DeleteOne(new BsonDocument("_id", ObjectId.Parse(request._id)));

                // error stuff
                if(deleted.DeletedCount == 1)
                {
                    return new DeleteUserResponse()
                    {
                        Errored = false,
                        Message = "Item deleted"
                    };
                }
                else
                {
                    return new DeleteUserResponse()
                    {
                        Errored = true,
                        Message = "No matching _id"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new DeleteUserResponse()
                {
                    Errored = true,
                    Message = "Errored while deleting"
                };
            }
        }
        
        #endregion

        #region News
        /// <summary>
        /// Get all news items as a list
        /// </summary>
        /// <returns></returns>
        public GetNewsItemsResponse GetNewsItems()
        {
            // init response
            GetNewsItemsResponse response = new GetNewsItemsResponse() 
                {NewsItems = new List<NewsItem>()};
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<NewsItem>("NewsItems");

                // query collection for all results
                response.NewsItems = collection.Find(new BsonDocument()).ToList();

                // generate error data
                if(response.NewsItems.Count > 0)
                {
                    response.Errored = false;
                    response.Message = "News items found";
                }
                else
                {
                    response.Errored = true;
                    response.Message = "No news items found";
                }
            }
            // db errors    
            catch(Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            // respond
            return response;
            
        }

        /// <summary>
        /// Get all published news items as a list
        /// </summary>
        /// <returns></returns>
        public GetPublishedNewsItemsResponse GetPublishedNewsItems()
        {
            // init response
            GetPublishedNewsItemsResponse response = new GetPublishedNewsItemsResponse() 
            {
                NewsItems = new List<NewsItem>() 
            };

            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<NewsItem>("NewsItems");

                // query collection for all results
                response.NewsItems = collection.Find(new BsonDocument("Published",true)).ToList();
                // generate error data
                if (response.NewsItems.Count > 0)
                {
                    response.Errored = false;
                    response.Message = "News items found";
                }
                else
                {
                    response.Errored = true;
                    response.Message = "No news items found";
                }
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            // respond
            return response;
        }

        /// <summary>
        /// Get a news item by the ID
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public GetNewsItemByIdResponse GetNewsItemById(GetNewsItemByIdRequest request)
        {
            // init response
            GetNewsItemByIdResponse response = new GetNewsItemByIdResponse() { News = new NewsItem() };
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<NewsItem>("NewsItems");

                // query collection for all results
                //List<NewsItem> temp = collection.Find(new BsonDocument("_id",ObjectId.Parse(request._id))).ToList();
                List<NewsItem> temp = collection.Find(item => item._id.Equals(request._id)).ToList();
                
                // generate error data
                if (temp.Count > 0)
                {
                    response.Errored = false;
                    response.Message = "News items found";
                    response.News = temp[0];
                }
                else
                {
                    response.Errored = true;
                    response.Message = "No news items found";
                }
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            // respond
            return response;
        }

        /// <summary>
        /// Inserts a single news story
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertNewsItemResponse InsertNewsItem(InsertNewsItemRequest request)
        {
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<NewsItem>("NewsItems");

                // insert the passed news story
                collection.InsertOne(request.NewsItem);

                if(request.NewsItem._id != null)
                {
                    return new InsertNewsItemResponse()
                    {
                        InsertedId = request.NewsItem._id,
                        Errored = false,
                        Message = "Successfully inserted"
                    };
                }
                else
                {
                    return new InsertNewsItemResponse()
                    {
                        Errored = true,
                        Message = "Item not inserted"
                    };
                }
            }
            // db errors
            catch(Exception ex)
            {
                return new InsertNewsItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// changes the news items published state to that of the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public PublishNewsItemResponse PublishNewsItem(PublishNewsItemRequest request)
        {
            // open DB and update the record
            try
            {
                // open client
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);
                // get collection
                var col = db.GetCollection<NewsItem>("NewsItems");

                // update the record
                var updated = col.UpdateOne
                    (new BsonDocument("_id",ObjectId.Parse(request._id)), 
                     new BsonDocument("$set", 
                     new BsonDocument("Published",request.IsPublished)));

                // set date if being published
                if (request.IsPublished)
                {
                    col.UpdateOne(new BsonDocument("_id",ObjectId.Parse(request._id)),
                                  new BsonDocument("$set",
                                  new BsonDocument("Date_published",DateTime.Now)));
                }

                if (updated.ModifiedCount == 1)
                {
                    return new PublishNewsItemResponse()
                    {
                        Errored = false,
                        Message = "Record updated"
                    };
                }
                else
                {
                    return new PublishNewsItemResponse()
                    {
                        Errored = true,
                        Message = "No matching _id"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new PublishNewsItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Deletes the NewsItem associated with the request._id
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DeleteNewsItemResponse DeleteNewsItem(DeleteNewsItemRequest request)
        {
            // try to delete the item
            try
            {
                // open DB client and get DB
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);
                // get collection
                var col = db.GetCollection<NewsItem>("NewsItems");

                // delete the item matching request._id
                var deleted = col.DeleteOne(new BsonDocument("_id", ObjectId.Parse(request._id)));

                if(deleted.DeletedCount == 1)
                {
                    return new DeleteNewsItemResponse()
                    {
                        Errored = false,
                        Message = "Item deleted"
                    };
                }
                else
                {
                    return new DeleteNewsItemResponse()
                    {
                        Errored = true,
                        Message = "No matching _id"
                    };
                }
            }
            catch(Exception ex)
            {
                return new DeleteNewsItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// Updates an entire News Item object
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public UpdateNewsItemResponse UpdateNewsItem(UpdateNewsItemRequest request)
        {
            // try open DB and update record
            try
            {
                // get client and database
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<NewsItem>("NewsItems");

                // update the record
                var updated = col.ReplaceOne(
                    //new BsonDocument("_id", ObjectId.Parse(request.NewsItem._id)), request.NewsItem);
                    item => item._id==request.NewsItem._id, request.NewsItem);

                // check the update was successful
                if (updated.ModifiedCount == 1)
                {
                    return new UpdateNewsItemResponse()
                    {
                        Errored = false,
                        Message = "News item updated"
                    };
                }
                else
                {
                    return new UpdateNewsItemResponse()
                    {
                        Errored = true,
                        Message = "No matching item found"
                    };
                }
            }
            catch (Exception ex)
            {
                return new UpdateNewsItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }
        #endregion

        #region Files
        /// <summary>
        /// Insert or update the current file record
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertFileRecordResponse InsertFileRecord(InsertFileRecordRequest request)
        {
            // init response
            InsertFileRecordResponse response = new InsertFileRecordResponse();

            // open DB and insert/update the record
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<FileRecord>("FileRecord");

                // get old file name
                List<FileRecord> fr = collection.Find(new BsonDocument()).ToList();
                if(fr.Count > 0)
                {
                    response.OldFileName = fr[0].FileName;
                    // if there is an old file and it has a different name flag the
                    // old file should be deleted
                    response.DeleteOldFile = request.FileName != response.OldFileName;
                    // if old file name same as new file name return out here
                    if (request.FileName == response.OldFileName)
                    {
                        response.Errored = false;
                        response.Message = "Same file name no record created";
                        return response;
                    }
                }
                
                // if first insert create the record else update the record (should only be one)
                if(collection.Find(new BsonDocument()).Count()>0)
                {
                    collection.UpdateOne(new BsonDocument(), new BsonDocument("$set", new BsonDocument( "FileName", request.FileName)));
                }
                else
                {
                    collection.InsertOne(new FileRecord() { FileName = request.FileName });
                }

                response.Errored = false;
                response.Message = "Record successfully updated";
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            return response;
        }

        /// <summary>
        /// Get the dropbox key and name of current file from record
        /// </summary>
        /// <returns></returns>
        public GetFileRecordResponse GetFileRecord()
        {
            GetFileRecordResponse response = new GetFileRecordResponse() 
            {
                DropboxKey = SysConfig.DBKey
            };

            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<FileRecord>("FileRecord");

                // grab current file name
                List<FileRecord> fr = new List<FileRecord>();
                fr = collection.Find(new BsonDocument()).ToList();
                response.FileName = fr[0].FileName;
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            return response;
        }

        /// <summary>
        /// Logs the download of a file by username
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public LogFileDownloadResponse LogFileDownload(LogFileDownloadRequest request)
        {
            // init response
            LogFileDownloadResponse response = new LogFileDownloadResponse();

            // open DB and insert/update the record
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<DownloadLog>("DownloadLog");

                // insert the log
                collection.InsertOne(request.DownloadLog);

                response.Errored = false;
                response.Message = "Record successfully updated";
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            return response;
        }
        #endregion

        #region Tutorials

        /// <summary>
        /// Inserts a tutorial item object to the DB
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertTutorialItemResponse InsertTutorialItem(InsertTutorialItemRequest request)
        {
            // try and insert the new object
            try
            {
                // get mongo DB
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // insert the new object
                col.InsertOne(request.TutorialItem);
                string idlink = request.TutorialItem._id;
                // no exception means success
                return new InsertTutorialItemResponse()
                {
                    Errored = false,
                    Message = "Tutorial created",
                    _idtutorial = idlink
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new InsertTutorialItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// grab all the tutorial items
        /// </summary>
        /// <returns></returns>
        public GetTutorialItemsResponse GetTutorialItems()
        {
            // try and open DB and get all tutorial items
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // grab list and return it
                return new GetTutorialItemsResponse()
                {
                    Errored = false,
                    Message = "Success",
                    TutorialItems = col.Find(new BsonDocument()).ToList()
                };
            }
            // DB errors    
            catch (Exception ex)
            {
                return new GetTutorialItemsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// gets all published tutorial items
        /// </summary>
        /// <returns></returns>
        public GetPublishTutoItemsResponse GetPublishTutoItems()
        {
            // try and get published tutorials
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // find and return publish tutorials
                return new GetPublishTutoItemsResponse()
                {
                    TutorialItems = col.Find(new BsonDocument("Published", true)).ToList(),
                    Errored = false,
                    Message = "Success"
                };
            }
            // DB errors
            catch(Exception ex)
            {
                return new GetPublishTutoItemsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// sets the publish flag as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public PublishTutorialItemResponse PublishTutorialItem(PublishTutorialItemRequest request)
        {
            // try and change the publish flag on the sent _id
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // update the item
                var updated = col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)), 
                                            new BsonDocument("$set", 
                                            new BsonDocument("Published",request.IsPublished)));

                // check if we need to update published date
                if (request.IsPublished)
                {
                    col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)), 
                                  new BsonDocument("$set", 
                                  new BsonDocument("DatePublished", DateTime.Now)));
                }

                // error stuff
                if (updated.ModifiedCount == 1)
                {
                    return new PublishTutorialItemResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new PublishTutorialItemResponse()
                    {
                        Errored = true,
                        Message = "No matching document or no update to process"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new PublishTutorialItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// get a single tutorial item by _id
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public GetTutorialItemByIdResponse GetTutorialItemById(GetTutorialItemByIdRequest request)
        {
            // try and get the tutorial item requestes
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // find our item (if _id not passed correctly index out of range error)
                return new GetTutorialItemByIdResponse()
                {
                    TutorialItem = col.Find(new BsonDocument("_id",ObjectId.Parse(request._id))).ToList()[0],
                    Errored = false,
                    Message = "Success"
                };
            }
            // DB Errors
            catch (Exception ex)
            {
                return new GetTutorialItemByIdResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// delete the item by _id requested
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DeleteTutorialItemResponse DeleteTutorialItem(DeleteTutorialItemRequest request)
        {
            // try and delete the requested item
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // buhbye
                var deleted = col.DeleteOne(new BsonDocument("_id", ObjectId.Parse(request._id)));

                // error stuff
                if (deleted.DeletedCount == 1)
                {
                    return new DeleteTutorialItemResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new DeleteTutorialItemResponse()
                    {
                        Errored = true,
                        Message = "No matching record"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new DeleteTutorialItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// updates a single tutorial item as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public UpdateTutorialItemResponse UpdateTutorialItem(UpdateTutorialItemRequest request)
        {
            // try and update the requested item
            try
            {
                // db client collection
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);
                var col = db.GetCollection<TutorialItem>("TutorialItems");

                // update
                var updated = col.ReplaceOne(new BsonDocument("_id", ObjectId.Parse(request.TutorialItem._id)), 
                                                                     request.TutorialItem);

                // error stuff
                if (updated.ModifiedCount == 1)
                {
                    return new UpdateTutorialItemResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new UpdateTutorialItemResponse()
                    {
                        Errored = true,
                        Message = "No matching item or no update required"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new UpdateTutorialItemResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        #endregion

        #region Comments

        /// <summary>
        /// Inserts a comment item object to the DB
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertCommentResponse InsertComment(InsertCommentRequest request)
        {
            // try and insert the new object
            try
            {
                // get mongo DB
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Comment>("Comment");

                // insert the new object
                col.InsertOne(request.Comment);

                // no exception means success
                return new InsertCommentResponse()
                {
                    Errored = false,
                    Message = "Comment sent"
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new InsertCommentResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }


        /// <summary>
        /// gets all published tutorial items
        /// </summary>
        /// <returns></returns>
        public GetPublishedCommentsResponse GetPublishedComments()
        {
            // try and get published tutorials
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // collection
                var col = db.GetCollection<Comment>("Comment");

                // find and return publish tutorials
                return new GetPublishedCommentsResponse()
                {
                    Comments = col.Find(new BsonDocument("Published", true)).ToList(),
                    Errored = false,
                    Message = "Success"
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new GetPublishedCommentsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// gets all published tutorial items
        /// </summary>
        /// <returns></returns>
        public GetUnpublishedCommentsResponse GetUnpublishedComments()
        {
            // try and get published tutorials
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // collection
                var col = db.GetCollection<Comment>("Comment");

                // find and return publish tutorials
                return new GetUnpublishedCommentsResponse()
                {
                    Comments = col.Find(new BsonDocument("Published", false)).ToList(),
                    Errored = false,
                    Message = "Success"
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new GetUnpublishedCommentsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// sets the publish flag as per the request
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public PublishCommentResponse PublishComment(PublishCommentRequest request)
        {
            // try and change the publish flag on the sent _id
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Comment>("Comment");

                // update the item
                var updated = col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)),
                                            new BsonDocument("$set",
                                            new BsonDocument("Published", request.IsPublished)));

                // check if we need to update published date
                if (request.IsPublished)
                {
                    col.UpdateOne(new BsonDocument("_id", ObjectId.Parse(request._id)),
                                  new BsonDocument("$set",
                                  new BsonDocument("Date_published", DateTime.Now)));
                }

                // error stuff
                if (updated.ModifiedCount == 1)
                {
                    return new PublishCommentResponse()
                    {
                        Errored = false,
                        Message = "Success"
                    };
                }
                else
                {
                    return new PublishCommentResponse()
                    {
                        Errored = true,
                        Message = "No matching document or no update to process"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new PublishCommentResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// delete a comment
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DeleteCommentResponse DeleteComment(DeleteCommentRequest request)
        {
            // try and delete the requested item
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Comment>("Comment");

                // buhbye
                var deleted = col.DeleteOne(new BsonDocument("_id", ObjectId.Parse(request._id)));

                // error stuff
                if (deleted.DeletedCount == 1)
                {
                    return new DeleteCommentResponse()
                    {
                        Errored = false,
                        Message = "Item deleted"
                    };
                }
                else
                {
                    return new DeleteCommentResponse()
                    {
                        Errored = true,
                        Message = "No matching _id"
                    };
                }
            }
            // DB errors
            catch (Exception ex)
            {
                return new DeleteCommentResponse()
                {
                    Errored = true,
                    Message = "Errored while deleting"
                };
            }
        }
        
        #endregion

        #region Youtube

        /// <summary>
        /// Insert or update the current UrlYoutube
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertUrlYoutubeResponse InsertUrlYoutube(InsertUrlYoutubeRequest request)
        {
            // init response
            InsertUrlYoutubeResponse response = new InsertUrlYoutubeResponse();

            // open DB and insert/update the record
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Youtube>("Youtube");

                // get old youtube name
                List<Youtube> ytb = collection.Find(new BsonDocument()).ToList();
                if (ytb.Count > 0)
                {
                    response.OldUrlYoutube = ytb[0].urlyoutube;
                    // if there is an old url and it has a different name flag the
                    // old url should be deleted
                    response.DeleteOldUrl = request.urlyoutube != response.OldUrlYoutube;
                    // if old url name same as new url name return out here
                    if (request.urlyoutube == response.OldUrlYoutube)
                    {
                        response.Errored = false;
                        response.Message = "Same url name no record created";
                        return response;
                    }
                }

                // if first insert create the record else update the record (should only be one)
                if (collection.Find(new BsonDocument()).Count() > 0)
                {
                    collection.UpdateOne(new BsonDocument(), new BsonDocument("$set", new BsonDocument("urlyoutube", request.urlyoutube)));
                }
                else
                {
                    collection.InsertOne(new Youtube() { urlyoutube = request.urlyoutube });
                }

                response.Errored = false;
                response.Message = "url successfully updated";
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            return response;
        }
        /// <summary>
        /// Get the dropbox key and name of current file from record
        /// </summary>
        /// <returns></returns>
        public GetUrlYoutubeResponse GetUrlYoutube()
        {
            GetUrlYoutubeResponse response = new GetUrlYoutubeResponse();
            try
            {
                // open DB client and get DB reference
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var database = client.GetDatabase(SysConfig.DBname);
                // get the collection
                var collection = database.GetCollection<Youtube>("Youtube");

                // grab current file name
                List<Youtube> ytb = new List<Youtube>();
                ytb = collection.Find(new BsonDocument()).ToList();
                response.urlyoutube = ytb[0].urlyoutube;
            }
            // db errors    
            catch (Exception ex)
            {
                response.Errored = true;
                response.Message = ex.Message;
            }

            return response;
        }

        #endregion

        #region Contact

        /// <summary>
        /// Inserts a contact item object to the DB
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public InsertContactResponse InsertContact(InsertContactRequest request)
        {
            // try and insert the new object
            try
            {
                // get mongo DB
                MongoClient client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Contact>("Contact");
                //Contact ct = new Contact(){
                //    request.Author,
                //    request.Email,
                //    request.Text,
                //};
                // insert the new object
                col.InsertOne(request.Contact);

                // no exception means success
                return new InsertContactResponse()
                {
                    Errored = false,
                    Message = "Contact sent"
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new InsertContactResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }

        /// <summary>
        /// gets all contact message
        /// </summary>
        /// <returns></returns>
        public GetContactsResponse GetContacts()
        {
            // try and get contact message
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // collection
                var col = db.GetCollection<Contact>("Contact");

                // find and return publish tutorials
                return new GetContactsResponse()
                {
                    Contacts = col.Find(new BsonDocument()).ToList(),
                    Errored = false,
                    Message = "Success"
                };
            }
            // DB errors
            catch (Exception ex)
            {
                return new GetContactsResponse()
                {
                    Errored = true,
                    Message = ex.Message
                };
            }
        }
        /// <summary>
        /// delete the contact message
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DeleteContactResponse DeleteContact(DeleteContactRequest request)
        {
            // try and delete the requested item
            try
            {
                // client and db
                var client = new MongoClient(SysConfig.DBconn);
                var db = client.GetDatabase(SysConfig.DBname);

                // get collection
                var col = db.GetCollection<Contact>("Contact");

                // buhbye
                var deleted = col.DeleteOne(new BsonDocument("_id", ObjectId.Parse(request._id)));

                // error stuff
                if (deleted.DeletedCount == 1)
                {
                    return new DeleteContactResponse()
                    {
                        Errored = false,
                        Message = "Item deleted"
                    };
                }
                else
                {
                    return new DeleteContactResponse()
                    {
                        Errored = true,
                        Message = "No matching _id"
                    };
                }
            }
            // DB errors
            catch (Exception excep)
            {
                return new DeleteContactResponse()
                {
                    Errored = true,
                    Message = "Errored while deleting"
                };
            }
        }

        #endregion

       
    }
}
